// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id          Int      @id @default(autoincrement())
  name        String
  japanName   String?
  setName     String
  setNumber   String
  rarity      String?
  cardType    String?
  series      String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  priceRecords PriceRecord[]
  watchlists   Watchlist[]

  @@unique([setName, setNumber])
}

model Source {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  baseUrl     String
  isActive    Boolean  @default(true)
  rateLimitMs Int      @default(3000)
  config      String?  // JSON string for scraper-specific config
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  priceRecords PriceRecord[]
}

model PriceRecord {
  id         Int      @id @default(autoincrement())
  cardId     Int
  sourceId   Int
  price      Float
  currency   String   @default("JPY")
  condition  String?  // mint, near_mint, good, etc.
  inStock    Boolean  @default(true)
  productUrl String?
  scrapedAt  DateTime @default(now())

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  source Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([cardId, scrapedAt])
  @@index([sourceId, scrapedAt])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlists Watchlist[]
  alerts     Alert[]
}

model Watchlist {
  id     Int @id @default(autoincrement())
  userId Int
  cardId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
}

model Alert {
  id          Int      @id @default(autoincrement())
  userId      Int
  cardId      Int
  targetPrice Float
  condition   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}